name: CMake Test

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
       fetch-depth: 2
    
    - name: 添加 MSBuild 到系统路径
      uses: microsoft/setup-msbuild@v1
    - name: 修改 CMake选项
      run: |
        $t=Get-Content CMakeLists.txt
        $crt_on='SHARED_CRT "Use shared crt runtime library." ON'
        $crt_off='SHARED_CRT "Use shared crt runtime library." OFF'
        $lib_off='as static lib" OFF'
        $lib_on='as static lib" ON'
        
        $t | ForEach-Object {$_.Replace($lib_off,$lib_on)} | ForEach-Object {$_.Replace($crt_on,$crt_off)} | Out-File CMakeLists.txt -Encoding UTF8
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: create file_structure
      run: tree /F /A | set-Content  file_structure.txt
    - name: upload demo
      uses: actions/upload-artifact@v2
      with:
        name: PC_Demo
        path: bin/demo.exe
    - name: Upload file_structure
      uses: actions/upload-artifact@v2
      with:
       name: file_structure
       path: file_structure.txt
